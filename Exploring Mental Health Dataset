{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":84895,"databundleVersionId":10008389,"sourceType":"competition"}],"dockerImageVersionId":31040,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/negardeylami/exploring-mental-health-dataset?scriptVersionId=249916099\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-07-11T06:43:06.760851Z","iopub.execute_input":"2025-07-11T06:43:06.76115Z","iopub.status.idle":"2025-07-11T06:43:07.15152Z","shell.execute_reply.started":"2025-07-11T06:43:06.761122Z","shell.execute_reply":"2025-07-11T06:43:07.15039Z"}},"outputs":[{"name":"stdout","text":"/kaggle/input/playground-series-s4e11/sample_submission.csv\n/kaggle/input/playground-series-s4e11/train.csv\n/kaggle/input/playground-series-s4e11/test.csv\n","output_type":"stream"}],"execution_count":1},{"cell_type":"markdown","source":"# **Libraries**\n","metadata":{}},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nfrom sklearn.preprocessing import OneHotEncoder\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.ensemble import RandomForestClassifier\n\nfrom sklearn.metrics import accuracy_score, f1_score\n\nfrom sklearn.model_selection import learning_curve","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-11T06:43:16.56636Z","iopub.execute_input":"2025-07-11T06:43:16.566798Z","iopub.status.idle":"2025-07-11T06:43:16.57312Z","shell.execute_reply.started":"2025-07-11T06:43:16.566771Z","shell.execute_reply":"2025-07-11T06:43:16.572134Z"}},"outputs":[],"execution_count":3},{"cell_type":"markdown","source":"# Data Overview\n","metadata":{}},{"cell_type":"code","source":"train = pd.read_csv(\"/kaggle/input/playground-series-s4e11/train.csv\")\ntest = pd.read_csv(\"/kaggle/input/playground-series-s4e11/test.csv\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-11T06:43:18.807535Z","iopub.execute_input":"2025-07-11T06:43:18.807936Z","iopub.status.idle":"2025-07-11T06:43:19.823034Z","shell.execute_reply.started":"2025-07-11T06:43:18.807904Z","shell.execute_reply":"2025-07-11T06:43:19.822029Z"}},"outputs":[],"execution_count":4},{"cell_type":"code","source":"train.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-11T06:43:21.327641Z","iopub.execute_input":"2025-07-11T06:43:21.328002Z","iopub.status.idle":"2025-07-11T06:43:21.335605Z","shell.execute_reply.started":"2025-07-11T06:43:21.327978Z","shell.execute_reply":"2025-07-11T06:43:21.334652Z"}},"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"(140700, 20)"},"metadata":{}}],"execution_count":5},{"cell_type":"code","source":"test.shape","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-11T06:43:22.673113Z","iopub.execute_input":"2025-07-11T06:43:22.673546Z","iopub.status.idle":"2025-07-11T06:43:22.679712Z","shell.execute_reply.started":"2025-07-11T06:43:22.673516Z","shell.execute_reply":"2025-07-11T06:43:22.678525Z"}},"outputs":[{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"(93800, 19)"},"metadata":{}}],"execution_count":6},{"cell_type":"code","source":"train.info()\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-11T06:43:23.284846Z","iopub.execute_input":"2025-07-11T06:43:23.285323Z","iopub.status.idle":"2025-07-11T06:43:23.389817Z","shell.execute_reply.started":"2025-07-11T06:43:23.285287Z","shell.execute_reply":"2025-07-11T06:43:23.38892Z"}},"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 140700 entries, 0 to 140699\nData columns (total 20 columns):\n #   Column                                 Non-Null Count   Dtype  \n---  ------                                 --------------   -----  \n 0   id                                     140700 non-null  int64  \n 1   Name                                   140700 non-null  object \n 2   Gender                                 140700 non-null  object \n 3   Age                                    140700 non-null  float64\n 4   City                                   140700 non-null  object \n 5   Working Professional or Student        140700 non-null  object \n 6   Profession                             104070 non-null  object \n 7   Academic Pressure                      27897 non-null   float64\n 8   Work Pressure                          112782 non-null  float64\n 9   CGPA                                   27898 non-null   float64\n 10  Study Satisfaction                     27897 non-null   float64\n 11  Job Satisfaction                       112790 non-null  float64\n 12  Sleep Duration                         140700 non-null  object \n 13  Dietary Habits                         140696 non-null  object \n 14  Degree                                 140698 non-null  object \n 15  Have you ever had suicidal thoughts ?  140700 non-null  object \n 16  Work/Study Hours                       140700 non-null  float64\n 17  Financial Stress                       140696 non-null  float64\n 18  Family History of Mental Illness       140700 non-null  object \n 19  Depression                             140700 non-null  int64  \ndtypes: float64(8), int64(2), object(10)\nmemory usage: 21.5+ MB\n","output_type":"stream"}],"execution_count":7},{"cell_type":"code","source":"# we need to handle non values\ntrain.isnull().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-11T06:43:23.910023Z","iopub.execute_input":"2025-07-11T06:43:23.910365Z","iopub.status.idle":"2025-07-11T06:43:23.993361Z","shell.execute_reply.started":"2025-07-11T06:43:23.91034Z","shell.execute_reply":"2025-07-11T06:43:23.992414Z"}},"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"id                                            0\nName                                          0\nGender                                        0\nAge                                           0\nCity                                          0\nWorking Professional or Student               0\nProfession                                36630\nAcademic Pressure                        112803\nWork Pressure                             27918\nCGPA                                     112802\nStudy Satisfaction                       112803\nJob Satisfaction                          27910\nSleep Duration                                0\nDietary Habits                                4\nDegree                                        2\nHave you ever had suicidal thoughts ?         0\nWork/Study Hours                              0\nFinancial Stress                              4\nFamily History of Mental Illness              0\nDepression                                    0\ndtype: int64"},"metadata":{}}],"execution_count":8},{"cell_type":"code","source":"train = train.drop(columns=['id','Name'])\ntest = test.drop(columns=['Name'])","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-11T06:43:28.2888Z","iopub.execute_input":"2025-07-11T06:43:28.289105Z","iopub.status.idle":"2025-07-11T06:43:28.31911Z","shell.execute_reply.started":"2025-07-11T06:43:28.289082Z","shell.execute_reply":"2025-07-11T06:43:28.31821Z"}},"outputs":[],"execution_count":9},{"cell_type":"code","source":"numeric_columns = ['Age', 'Academic Pressure', 'Work Pressure', 'CGPA',\n                   'Study Satisfaction', 'Job Satisfaction', 'Work/Study Hours',\n                   'Financial Stress', 'Depression']\n\n\ncategorical_columns = ['Gender', 'City', 'Working Professional or Student',\n                      'Profession', 'Sleep Duration', 'Dietary Habits',\n                      'Degree', 'Have you ever had suicidal thoughts ?',\n                      'Family History of Mental Illness']\n\nfor feature in categorical_columns:\n  unique = train[feature].unique()\n  print(f\"column: {feature}\")\n  print(f\"Unique Values: {unique}\\n\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-11T06:43:29.039447Z","iopub.execute_input":"2025-07-11T06:43:29.039745Z","iopub.status.idle":"2025-07-11T06:43:29.114956Z","shell.execute_reply.started":"2025-07-11T06:43:29.039724Z","shell.execute_reply":"2025-07-11T06:43:29.113777Z"}},"outputs":[{"name":"stdout","text":"column: Gender\nUnique Values: ['Female' 'Male']\n\ncolumn: City\nUnique Values: ['Ludhiana' 'Varanasi' 'Visakhapatnam' 'Mumbai' 'Kanpur' 'Ahmedabad'\n 'Thane' 'Nashik' 'Bangalore' 'Patna' 'Rajkot' 'Jaipur' 'Pune' 'Lucknow'\n 'Meerut' 'Agra' 'Surat' 'Faridabad' 'Hyderabad' 'Srinagar' 'Ghaziabad'\n 'Kolkata' 'Chennai' 'Kalyan' 'Nagpur' 'Vadodara' 'Vasai-Virar' 'Delhi'\n 'Bhopal' 'Indore' 'Ishanabad' 'Vidhi' 'Ayush' 'Gurgaon' 'Krishna'\n 'Aishwarya' 'Keshav' 'Harsha' 'Nalini' 'Aditya' 'Malyansh' 'Raghavendra'\n 'Saanvi' 'M.Tech' 'Bhavna' 'Less Delhi' 'Nandini' 'M.Com' 'Plata'\n 'Atharv' 'Pratyush' 'City' '3.0' 'Less than 5 Kalyan' 'MCA' 'Mira'\n 'Moreadhyay' 'Morena' 'Ishkarsh' 'Kashk' 'Mihir' 'Vidya' 'Tolkata' 'Anvi'\n 'Krinda' 'Ayansh' 'Shrey' 'Ivaan' 'Vaanya' 'Gaurav' 'Harsh' 'Reyansh'\n 'Kashish' 'Kibara' 'Vaishnavi' 'Chhavi' 'Parth' 'Mahi' 'Tushar' 'MSc'\n 'No' 'Rashi' 'ME' 'Molkata' 'Researcher' 'Kagan' 'Armaan' 'Ithal'\n 'Nalyan' 'Dhruv' 'Galesabad' 'Itheg' 'Aaradhya' 'Pooja' 'Khushi'\n 'Khaziabad' 'Jhanvi' 'Unirar']\n\ncolumn: Working Professional or Student\nUnique Values: ['Working Professional' 'Student']\n\ncolumn: Profession\nUnique Values: ['Chef' 'Teacher' nan 'Business Analyst' 'Finanancial Analyst' 'Chemist'\n 'Electrician' 'Software Engineer' 'Data Scientist' 'Plumber'\n 'Marketing Manager' 'Accountant' 'Entrepreneur' 'HR Manager'\n 'UX/UI Designer' 'Content Writer' 'Educational Consultant'\n 'Civil Engineer' 'Manager' 'Pharmacist' 'Financial Analyst' 'Architect'\n 'Mechanical Engineer' 'Customer Support' 'Consultant' 'Judge'\n 'Researcher' 'Pilot' 'Graphic Designer' 'Travel Consultant'\n 'Digital Marketer' 'Lawyer' 'Research Analyst' 'Sales Executive' 'Doctor'\n 'Unemployed' 'Investment Banker' 'Family Consultant' 'B.Com' 'BE'\n 'Student' 'Yogesh' 'Dev' 'MBA' 'LLM' 'BCA' 'Academic' 'Profession'\n 'FamilyVirar' 'City Manager' 'BBA' 'Medical Doctor'\n 'Working Professional' 'MBBS' 'Patna' 'Unveil' 'B.Ed' 'Nagpur' 'Moderate'\n 'M.Ed' 'Analyst' 'Pranav' 'Visakhapatnam' 'PhD' 'Yuvraj']\n\ncolumn: Sleep Duration\nUnique Values: ['More than 8 hours' 'Less than 5 hours' '5-6 hours' '7-8 hours'\n 'Sleep_Duration' '1-2 hours' '6-8 hours' '4-6 hours' '6-7 hours'\n '10-11 hours' '8-9 hours' '40-45 hours' '9-11 hours' '2-3 hours'\n '3-4 hours' 'Moderate' '55-66 hours' '4-5 hours' '9-6 hours' '1-3 hours'\n 'Indore' '45' '1-6 hours' '35-36 hours' '8 hours' 'No' '10-6 hours'\n 'than 5 hours' '49 hours' 'Unhealthy' 'Work_Study_Hours' '3-6 hours'\n '45-48 hours' '9-5' 'Pune' '9-5 hours']\n\ncolumn: Dietary Habits\nUnique Values: ['Healthy' 'Unhealthy' 'Moderate' 'Yes' 'Pratham' 'BSc' 'Gender' '3'\n 'More Healthy' 'Less than Healthy' 'Mihir' '1.0' 'Hormonal' 'Electrician'\n nan 'No Healthy' 'Less Healthy' 'M.Tech' 'Vegas' 'No' 'Male' 'Indoor'\n 'Class 12' '2']\n\ncolumn: Degree\nUnique Values: ['BHM' 'LLB' 'B.Pharm' 'BBA' 'MCA' 'MD' 'BSc' 'ME' 'B.Arch' 'BCA' 'BE'\n 'MA' 'B.Ed' 'B.Com' 'MBA' 'M.Com' 'MHM' 'BA' 'Class 12' 'M.Tech' 'PhD'\n 'M.Ed' 'MSc' 'B.Tech' 'LLM' 'MBBS' 'M.Pharm' 'UX/UI Designer' 'MPA' 'BH'\n 'Nalini' 'BEd' 'B.Sc' 'Veda' 'Bhopal' 'S.Tech' 'Degree' '20' 'Class 11'\n 'H_Pharm' 'M' 'P.Com' 'BPharm' 'Business Analyst' 'M.Arch' 'LL.Com'\n 'Data Scientist' 'MPharm' 'L.Ed' 'P.Pharm' 'Kalyan' 'Unite' 'BArch'\n 'HR Manager' 'Badhya' 'S.Pharm' 'LLBA' 'Vrinda' 'M. Business Analyst'\n 'Bhavesh' '0' 'LLCom' '29' 'MTech' 'Vivaan' 'BPA' 'Plumber' '5.61' 'Brit'\n 'B.03' 'Ritik' '5.56' 'MEd' 'B' 'B BA' '7.06' 'B.B.Arch' 'ACA' 'Brithika'\n 'CGPA' '24' 'M_Tech' 'Pihu' 'BB' 'Jhanvi' 'LLTech' 'Aarav' 'Entrepreneur'\n '8.56' 'LHM' 'Lata' 'S.Arch' 'Marsh' 'HCA' '5.88' 'B.Student' 'LL B.Ed'\n 'M.S' 'Navya' 'Mahika' nan 'K.Ed' 'B.3.79' 'Mthanya'\n 'Working Professional' 'Esha' 'LLS' 'LLEd' 'E.Tech' 'Doctor' 'N.Pharm'\n 'LCA' 'B B.Com' 'RCA' 'Mihir' 'Advait']\n\ncolumn: Have you ever had suicidal thoughts ?\nUnique Values: ['No' 'Yes']\n\ncolumn: Family History of Mental Illness\nUnique Values: ['No' 'Yes']\n\n","output_type":"stream"}],"execution_count":10},{"cell_type":"code","source":"#cleaning the data\nsleepmode = train['Sleep Duration'].mode()[0]\ndietmode = train['Dietary Habits'].mode()[0]\n\ntrain = train.replace({'Sleep Duration': {'Indore': sleepmode ,'Work_Study_Hours': sleepmode , 'Unhealthy': sleepmode,\n\"Pune\": sleepmode, \"Sleep_Duration\": sleepmode, \"than 5 hours\": sleepmode, 'Moderate': sleepmode, 'No':sleepmode,\n\"40-45 hours\": \"4-5 hours\", \"55-66 hours\": \"5-6 hours\", \"35-36 hours\": \"4-6 hours\", \"45-48 hours\":sleepmode,\n\"45\": sleepmode, '49 hours': sleepmode}})\n\ntrain = train.replace({'Dietary Habits':{\n    'Yes': \"Healthy\", '1.0': \"Healthy\", 'Pratham': dietmode,  'BSc': dietmode, 'Gender': dietmode,\n    '3': dietmode, 'M.Tech': dietmode, 'Mihir': dietmode,'Vegas': dietmode,'Male': dietmode,\n    'Indoor': dietmode,'Male': dietmode,'Class 12': dietmode, '2': dietmode,  'Less Healthy' :\"Unhealthy\",\n    \"Hormonal\":dietmode, 'Electrician':dietmode, 'No': 'Unhealthy','No Healthy':'Unhealthy', \"More Healthy\": \"Healthy\",\n    'Less than Healthy': \"Unhealthy\"\n}})\n\n\ntest = test.replace({'Sleep Duration': {'Indore': sleepmode ,'Work_Study_Hours': sleepmode , 'Unhealthy': sleepmode,\n\"Pune\": sleepmode, \"Sleep_Duration\": sleepmode, \"than 5 hours\": sleepmode, 'Moderate': sleepmode, 'No':sleepmode,\n\"40-45 hours\": \"4-5 hours\", \"55-66 hours\": \"5-6 hours\", \"35-36 hours\": \"4-6 hours\", \"45-48 hours\":sleepmode,\n\"45\": sleepmode , '49 hours': sleepmode}})\n\ntest = test.replace({'Dietary Habits':{\n    'Yes': \"Healthy\", '1.0': \"Healthy\", 'Pratham': dietmode,  'BSc': dietmode, 'Gender': dietmode,\n    '3': dietmode, 'M.Tech': dietmode, 'Mihir': dietmode,'Vegas': dietmode,'Male': dietmode,\n    'Indoor': dietmode,'Male': dietmode,'Class 12': dietmode, '2': dietmode,  'Less Healthy' :\"Unhealthy\",\n    \"Hormonal\":dietmode, 'Electrician':dietmode, 'No': 'Unhealthy','No Healthy':'Unhealthy', \"More Healthy\": \"Healthy\",\n    'Less than Healthy': \"Unhealthy\"\n}})\n\nprint(train['Dietary Habits'].unique(),\ntrain['Sleep Duration'].unique())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-11T06:43:29.915584Z","iopub.execute_input":"2025-07-11T06:43:29.91669Z","iopub.status.idle":"2025-07-11T06:43:30.301401Z","shell.execute_reply.started":"2025-07-11T06:43:29.916649Z","shell.execute_reply":"2025-07-11T06:43:30.300524Z"}},"outputs":[{"name":"stdout","text":"['Healthy' 'Unhealthy' 'Moderate' nan] ['More than 8 hours' 'Less than 5 hours' '5-6 hours' '7-8 hours'\n '1-2 hours' '6-8 hours' '4-6 hours' '6-7 hours' '10-11 hours' '8-9 hours'\n '4-5 hours' '9-11 hours' '2-3 hours' '3-4 hours' '9-6 hours' '1-3 hours'\n '1-6 hours' '8 hours' '10-6 hours' '3-6 hours' '9-5' '9-5 hours']\n","output_type":"stream"}],"execution_count":11},{"cell_type":"code","source":"#finding missing values or typos in numerical values\nfor feature in numeric_columns:\n  unique = train[feature].unique()\n  print(f\"column: {feature}\")\n  print(f\"Unique Values: {unique}\\n\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-11T06:43:30.548229Z","iopub.execute_input":"2025-07-11T06:43:30.549034Z","iopub.status.idle":"2025-07-11T06:43:30.576352Z","shell.execute_reply.started":"2025-07-11T06:43:30.549001Z","shell.execute_reply":"2025-07-11T06:43:30.575246Z"}},"outputs":[{"name":"stdout","text":"column: Age\nUnique Values: [49. 26. 33. 22. 30. 59. 47. 38. 24. 42. 55. 51. 39. 29. 50. 23. 56. 45.\n 37. 46. 31. 19. 28. 25. 41. 60. 18. 36. 21. 58. 44. 43. 40. 35. 54. 27.\n 52. 48. 57. 53. 34. 20. 32.]\n\ncolumn: Academic Pressure\nUnique Values: [nan  5.  2.  3.  4.  1.]\n\ncolumn: Work Pressure\nUnique Values: [ 5.  4. nan  1.  2.  3.]\n\ncolumn: CGPA\nUnique Values: [    nan  8.97    5.9     7.03    5.59    8.13    5.7     9.54    8.04\n  9.79    8.38    6.1     7.04    8.52    5.64    8.58    6.51    7.25\n  7.83    9.93    8.74    6.73    5.57    8.59    7.1     6.08    5.74\n  9.86    6.7     6.21    5.87    6.37    9.72    5.88    9.56    6.99\n  5.24    9.21    7.85    6.95    5.86    7.92    9.66    8.94    9.71\n  7.87    5.6     7.9     5.46    6.79    8.7     7.38    8.5     7.09\n  9.82    8.89    7.94    9.11    6.75    7.53    9.49    9.01    7.64\n  5.27    6.      9.44    5.75    7.51    9.05    6.38    8.95    9.88\n  5.32    6.27    7.7     8.1     9.59    8.96    5.51    7.43    8.79\n  9.95    5.37    6.86    8.32    9.74    5.66    7.48    8.23    8.81\n  6.03    5.56    5.68    5.14    7.61    6.17    8.17    9.87    8.75\n  6.16    9.5     7.99    5.67    8.92    6.19    5.76    6.25    5.11\n  5.58    5.65    9.89    8.03    6.61    9.41    8.64    7.21    8.28\n  6.04    9.13    8.08    9.96    5.12    8.35    7.07    9.6     9.24\n  8.54    8.78    8.93    8.91    9.04    6.83    5.85    7.74    6.41\n  8.9     7.75    7.88    5.42    7.52    7.68    8.4     9.39    6.84\n  5.99    8.62    8.53    7.47    6.78    6.42    9.92    8.39    5.89\n  7.22    6.81    9.02    9.97    9.63    9.67    5.41    7.27    6.05\n  6.85    9.33    5.81    6.53    5.98    6.02    6.74    5.26    7.72\n  7.39    8.43    9.34    5.44    5.82    5.72    8.19    8.44    8.98\n  9.37    5.8     7.28    7.6     7.91    9.17    7.46    9.43    9.91\n  9.36    5.16    7.08    9.26    8.83   10.      7.8     9.46    6.63\n  7.24    6.47    7.77    5.06    7.17    8.24    6.88    9.03    5.08\n  5.45    8.46    9.19    6.36    8.73    7.11    9.12    9.4     8.11\n  9.98    5.55    8.61    8.14    6.89    9.84    5.48    8.21    7.82\n  8.55    5.79    8.77    8.29    6.92    7.37    9.7     6.26    7.26\n  7.5     6.82    7.15    5.77    5.91    5.1     7.71    9.06    5.71\n  5.84    9.42    6.23    6.29    5.25    9.69    9.9     6.39    8.09\n  5.83    5.47    6.56    8.71    9.94    6.69    5.52    7.3     7.02\n  6.33    8.07    8.37    8.      7.79    8.65    6.28    7.35    8.69\n  7.12    7.32    7.13    5.97    5.09    6.91    6.76    6.52    7.45\n  8.56    6.5     8.63    8.27    8.49    6.59    9.29    5.3     7.06\n  5.38    6.65    9.16    8.01    8.25    8.02    8.47    7.34    8.88\n  7.14    8.42    5.17    9.1     7.49    9.85    7.42    9.31    6.35\n  7.      5.39    5.61    9.78    9.25    5.69    9.47    8.16    7.23\n  6.46    8.26    6.32    6.77    8.85    5.03    7.65    5.78    6.24\n  5.35    6.06    7.78    6.64    7.0625  6.98    6.44    6.09  ]\n\ncolumn: Study Satisfaction\nUnique Values: [nan  2.  5.  3.  4.  1.]\n\ncolumn: Job Satisfaction\nUnique Values: [ 2.  3. nan  1.  5.  4.]\n\ncolumn: Work/Study Hours\nUnique Values: [ 1.  7.  3. 10.  9.  6.  8.  2.  0.  5. 12.  4. 11.]\n\ncolumn: Financial Stress\nUnique Values: [ 2.  3.  1.  4.  5. nan]\n\ncolumn: Depression\nUnique Values: [0 1]\n\n","output_type":"stream"}],"execution_count":12},{"cell_type":"code","source":"# handling null values using mean for numeric datas and mode for numerical datas\ntrain[numeric_columns] = train[numeric_columns].fillna(train[numeric_columns].mean())\ntest[[col for col in numeric_columns if col != 'Depression']] = test[[col for col in numeric_columns if col != 'Depression']].fillna(test[[col for col in numeric_columns if col != 'Depression']].mean())\n\nfor col in categorical_columns:\n    train[col] = train[col].fillna(train[col].mode()[0])\n    test[col] = test[col].fillna(test[col].mode()[0])\n\n\nprint(train.isnull().sum())\nprint(train.head())","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-11T06:43:30.763783Z","iopub.execute_input":"2025-07-11T06:43:30.764114Z","iopub.status.idle":"2025-07-11T06:43:31.221317Z","shell.execute_reply.started":"2025-07-11T06:43:30.764093Z","shell.execute_reply":"2025-07-11T06:43:31.220369Z"}},"outputs":[{"name":"stdout","text":"Gender                                   0\nAge                                      0\nCity                                     0\nWorking Professional or Student          0\nProfession                               0\nAcademic Pressure                        0\nWork Pressure                            0\nCGPA                                     0\nStudy Satisfaction                       0\nJob Satisfaction                         0\nSleep Duration                           0\nDietary Habits                           0\nDegree                                   0\nHave you ever had suicidal thoughts ?    0\nWork/Study Hours                         0\nFinancial Stress                         0\nFamily History of Mental Illness         0\nDepression                               0\ndtype: int64\n   Gender   Age           City Working Professional or Student  \\\n0  Female  49.0       Ludhiana            Working Professional   \n1    Male  26.0       Varanasi            Working Professional   \n2    Male  33.0  Visakhapatnam                         Student   \n3    Male  22.0         Mumbai            Working Professional   \n4  Female  30.0         Kanpur            Working Professional   \n\n         Profession  Academic Pressure  Work Pressure      CGPA  \\\n0              Chef           3.142273       5.000000  7.658636   \n1           Teacher           3.142273       4.000000  7.658636   \n2           Teacher           5.000000       2.998998  8.970000   \n3           Teacher           3.142273       5.000000  7.658636   \n4  Business Analyst           3.142273       1.000000  7.658636   \n\n   Study Satisfaction  Job Satisfaction     Sleep Duration Dietary Habits  \\\n0             2.94494          2.000000  More than 8 hours        Healthy   \n1             2.94494          3.000000  Less than 5 hours      Unhealthy   \n2             2.00000          2.974404          5-6 hours        Healthy   \n3             2.94494          1.000000  Less than 5 hours       Moderate   \n4             2.94494          1.000000          5-6 hours      Unhealthy   \n\n    Degree Have you ever had suicidal thoughts ?  Work/Study Hours  \\\n0      BHM                                    No               1.0   \n1      LLB                                   Yes               7.0   \n2  B.Pharm                                   Yes               3.0   \n3      BBA                                   Yes              10.0   \n4      BBA                                   Yes               9.0   \n\n   Financial Stress Family History of Mental Illness  Depression  \n0               2.0                               No           0  \n1               3.0                               No           1  \n2               1.0                               No           1  \n3               1.0                              Yes           1  \n4               4.0                              Yes           0  \n","output_type":"stream"}],"execution_count":13},{"cell_type":"code","source":"# train test split\nX_train, X_test, y_train, y_test = train_test_split(train.drop(columns=['Depression']), train['Depression'], test_size=0.25, random_state=42 )\nprint(X_train.shape, X_test.shape)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-11T06:43:31.684057Z","iopub.execute_input":"2025-07-11T06:43:31.684442Z","iopub.status.idle":"2025-07-11T06:43:31.762349Z","shell.execute_reply.started":"2025-07-11T06:43:31.684419Z","shell.execute_reply":"2025-07-11T06:43:31.761405Z"}},"outputs":[{"name":"stdout","text":"(105525, 17) (35175, 17)\n","output_type":"stream"}],"execution_count":14},{"cell_type":"code","source":"# normalization and one hot encoding\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', StandardScaler(), [col for col in numeric_columns if col != 'Depression']),\n        ('cat', OneHotEncoder(handle_unknown=\"ignore\"), categorical_columns)\n    ]\n,  remainder='drop')\n\nX_train = preprocessor.fit_transform(X_train)\nX_test = preprocessor.transform(X_test)\ntest = preprocessor.transform(test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-11T06:43:32.257791Z","iopub.execute_input":"2025-07-11T06:43:32.258088Z","iopub.status.idle":"2025-07-11T06:43:33.208723Z","shell.execute_reply.started":"2025-07-11T06:43:32.258066Z","shell.execute_reply":"2025-07-11T06:43:33.207271Z"}},"outputs":[],"execution_count":15},{"cell_type":"code","source":"# fit the model\nrandomForest = RandomForestClassifier()\nrandomForest.fit(X_train, y_train)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-07-11T06:43:33.210724Z","iopub.execute_input":"2025-07-11T06:43:33.21128Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# metrics and accuracy\ny_pred = randomForest.predict(X_test)\ny_pred_train = randomForest.predict(X_train)\n\ntrain_accuracy_score = accuracy_score(y_train, y_pred_train)\ntest_accuracy_score = accuracy_score(y_test, y_pred)\n\ntrain_f1_score = f1_score(y_train, y_pred_train)\ntest_f1_score = f1_score(y_test, y_pred)\n\nprint(f\"Train Accuracy: {train_accuracy_score}\")\nprint(f\"Test Accuracy: {test_accuracy_score}\")\nprint(f\"Train F1 Score : {train_f1_score}\")\nprint(f\"Test F1 Score: {test_f1_score}\")\n\n","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Plot a learning curve\ntrain_sizes, train_scores, test_scores = learning_curve(randomForest, X_train, y_train, cv=5, n_jobs=-1, train_sizes=np.linspace(0.1, 1.0, 10))\n\ntrain_scores_mean = np.mean(train_scores, axis=1)\ntrain_scores_std = np.std(train_scores, axis=1)\ntest_scores_mean = np.mean(test_scores, axis=1)\ntest_scores_std = np.std(test_scores, axis=1)\n\nplt.figure(figsize=(10, 6))\nplt.fill_between(train_sizes, train_scores_mean - train_scores_std, train_scores_mean + train_scores_std, alpha=0.1, color=\"r\")\nplt.fill_between(train_sizes, test_scores_mean - test_scores_std, test_scores_mean + test_scores_std, alpha=0.1, color=\"g\")\nplt.plot(train_sizes, train_scores_mean, 'o-', color=\"r\", label=\"Training score\")\nplt.plot(train_sizes, test_scores_mean, 'o-', color=\"g\", label=\"Cross-validation score\")\nplt.title(\"Learning Curve\")\nplt.xlabel(\"Training examples\")\nplt.ylabel(\"Score\")\nplt.legend(loc=\"best\")\nplt.grid()\nplt.show()","metadata":{"trusted":true,"execution":{"execution_failed":"2025-07-11T06:42:34.158Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"# Predict on the test data\ntest_pred = randomForest.predict(test)","metadata":{"trusted":true,"execution":{"execution_failed":"2025-07-11T06:42:34.158Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}